-- MySQL Script generated by MySQL Workbench
-- Sun Dec 27 20:48:26 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8;
USE `mydb`;

-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`users`;

CREATE TABLE IF NOT EXISTS `mydb`.`users`
(
    `id`         INT          NOT NULL,
    `first_name` VARCHAR(255) NOT NULL,
    `surname`    VARCHAR(255) NOT NULL,
    `email`      VARCHAR(255) NOT NULL,
    `password`   VARCHAR(255) NOT NULL,
    `role`       VARCHAR(255) NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`libraries`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`libraries`;

CREATE TABLE IF NOT EXISTS `mydb`.`libraries`
(
    `id`               INT     NOT NULL,
    `borrowing_period` INT     NOT NULL,
    `visible`          TINYINT NOT NULL,
    `user_id`          INT     NOT NULL,
    PRIMARY KEY (`id`),
    INDEX `fk_libraries_users1_idx` (`user_id` ASC) VISIBLE,
    UNIQUE INDEX `users_id_UNIQUE` (`user_id` ASC) VISIBLE,
    CONSTRAINT `fk_libraries_users1`
        FOREIGN KEY (`user_id`)
            REFERENCES `mydb`.`users` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`books`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`books`;

CREATE TABLE IF NOT EXISTS `mydb`.`books`
(
    `id`             INT          NOT NULL,
    `title`          VARCHAR(255) NOT NULL,
    `author`         VARCHAR(255) NOT NULL,
    `isbn`           VARCHAR(255) NULL,
    `available`      TINYINT      NOT NULL,
    `available_from` DATE         NULL,
    `library_id`     INT          NOT NULL,
    PRIMARY KEY (`id`),
    INDEX `fk_books_libraries1_idx` (`library_id` ASC) VISIBLE,
    CONSTRAINT `fk_books_libraries1`
        FOREIGN KEY (`library_id`)
            REFERENCES `mydb`.`libraries` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`bookrents`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`bookrents`;

CREATE TABLE IF NOT EXISTS `mydb`.`bookrents`
(
    `id`         INT     NOT NULL,
    `owner_id`   INT     NOT NULL,
    `start_date` DATE    NOT NULL,
    `end_date`   DATE    NOT NULL,
    `archive`    TINYINT NOT NULL,
    `book_id`    INT     NOT NULL,
    `user_id`    INT     NOT NULL,
    PRIMARY KEY (`id`),
    INDEX `fk_bookrent_books1_idx` (`book_id` ASC) VISIBLE,
    INDEX `fk_bookrent_users1_idx` (`user_id` ASC) VISIBLE,
    CONSTRAINT `fk_bookrent_books1`
        FOREIGN KEY (`book_id`)
            REFERENCES `mydb`.`books` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_bookrent_users1`
        FOREIGN KEY (`user_id`)
            REFERENCES `mydb`.`users` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`chats`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`chats`;

CREATE TABLE IF NOT EXISTS `mydb`.`chats`
(
    `id`    INT          NOT NULL,
    `title` VARCHAR(255) NOT NULL,
    PRIMARY KEY (`id`)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`messages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`messages`;

CREATE TABLE IF NOT EXISTS `mydb`.`messages`
(
    `id`         INT        NOT NULL,
    `time_stamp` DATETIME   NOT NULL,
    `text`       TEXT(1000) NOT NULL,
    `chat_id`    INT        NOT NULL,
    `user_id`    INT        NOT NULL,
    PRIMARY KEY (`id`),
    INDEX `fk_messages_chat1_idx` (`chat_id` ASC) VISIBLE,
    INDEX `fk_messages_users1_idx` (`user_id` ASC) VISIBLE,
    CONSTRAINT `fk_messages_chat1`
        FOREIGN KEY (`chat_id`)
            REFERENCES `mydb`.`chats` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_messages_users1`
        FOREIGN KEY (`user_id`)
            REFERENCES `mydb`.`users` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`tags`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`tags`;

CREATE TABLE IF NOT EXISTS `mydb`.`tags`
(
    `id`   INT          NOT NULL,
    `text` VARCHAR(255) NOT NULL,
    PRIMARY KEY (`id`)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`books_tags`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`books_tags`;

CREATE TABLE IF NOT EXISTS `mydb`.`books_tags`
(
    `books_id` INT NOT NULL,
    `tags_id`  INT NOT NULL,
    PRIMARY KEY (`books_id`, `tags_id`),
    INDEX `fk_tags_has_books_books1_idx` (`books_id` ASC) VISIBLE,
    INDEX `fk_tags_has_books_tags_idx` (`tags_id` ASC) VISIBLE,
    CONSTRAINT `fk_tags_has_books_tags`
        FOREIGN KEY (`tags_id`)
            REFERENCES `mydb`.`tags` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_tags_has_books_books1`
        FOREIGN KEY (`books_id`)
            REFERENCES `mydb`.`books` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`chats_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`chats_users`;

CREATE TABLE IF NOT EXISTS `mydb`.`chats_users`
(
    `chats_id` INT NOT NULL,
    `users_id` INT NOT NULL,
    PRIMARY KEY (`chats_id`, `users_id`),
    INDEX `fk_users_has_chat_chat1_idx` (`chats_id` ASC) VISIBLE,
    INDEX `fk_users_has_chat_users1_idx` (`users_id` ASC) VISIBLE,
    CONSTRAINT `fk_users_has_chat_users1`
        FOREIGN KEY (`users_id`)
            REFERENCES `mydb`.`users` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_users_has_chat_chat1`
        FOREIGN KEY (`chats_id`)
            REFERENCES `mydb`.`chats` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`hibernate_sequence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`hibernate_sequence`;

CREATE TABLE IF NOT EXISTS `mydb`.`hibernate_sequence`
(
    `next_val` BIGINT NOT NULL
)
    ENGINE = InnoDB;



SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- insert in table `mydb`.`users`
-- -----------------------------------------------------
INSERT mydb.users(`id`, `first_name`, `surname`, `email`, `password`, `role`)
VALUES (1, 'admin_1', '1_admin', 'admin_1@seznam.cz', '123', 'ADMIN');
INSERT mydb.users(`id`, `first_name`, `surname`, `email`, `password`, `role`)
VALUES (2, 'user_2', '2_user', 'user_2@seznam.cz', '123', 'USER');
INSERT mydb.users(`id`, `first_name`, `surname`, `email`, `password`, `role`)
VALUES (3, 'user_3', '3_user', 'user_3@seznam.cz', '123', 'USER');
INSERT mydb.users(`id`, `first_name`, `surname`, `email`, `password`, `role`)
VALUES (4, 'user_4', '4_user', 'user_4@seznam.cz', '123', 'USER');


-- -----------------------------------------------------
-- insert in table `mydb`.`tags`
-- -----------------------------------------------------
INSERT mydb.tags(`id`, `text`)
VALUES (1, 'Space');
INSERT mydb.tags(`id`, `text`)
VALUES (2, 'Recipes');
INSERT mydb.tags(`id`, `text`)
VALUES (3, 'Fashion');


-- -----------------------------------------------------
-- insert in table `mydb`.`libraries`
-- -----------------------------------------------------
INSERT mydb.libraries(`id`, `borrowing_period`, `visible`, `user_id`)
VALUES (1, 7, true, 2);
INSERT mydb.libraries(`id`, `borrowing_period`, `visible`, `user_id`)
VALUES (2, 14, false, 3);
INSERT mydb.libraries(`id`, `borrowing_period`, `visible`, `user_id`)
VALUES (3, 21, true, 4);


-- -----------------------------------------------------
-- insert in table `mydb`.`books`
-- -----------------------------------------------------
INSERT mydb.books(`id`, `title`, `author`, `isbn`, `available`, `available_from`, `library_id`)
VALUES (1, 'About Fashion', 'author_1', 'isbn_1', true, null, 1);
INSERT mydb.books(`id`, `title`, `author`, `isbn`, `available`, `available_from`, `library_id`)
VALUES (2, 'About Recipes', 'author_2', 'isbn_2', true, null, 1);
INSERT mydb.books(`id`, `title`, `author`, `isbn`, `available`, `available_from`, `library_id`)
VALUES (3, 'About Space Fashion', 'author_3', 'isbn_3', true, null, 1);
INSERT mydb.books(`id`, `title`, `author`, `isbn`, `available`, `available_from`, `library_id`)
VALUES (4, 'About Space', 'author_4', 'isbn_4', true, null, 2);
INSERT mydb.books(`id`, `title`, `author`, `isbn`, `available`, `available_from`, `library_id`)
VALUES (5, 'About Space Recipes', 'author_5', 'isbn_5', true, null, 2);


-- -----------------------------------------------------
-- insert in table `mydb`.`books_tags`
-- -----------------------------------------------------
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (1, 3);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (2, 2);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (3, 1);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (3, 3);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (4, 1);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (5, 1);
INSERT mydb.books_tags(`books_id`, `tags_id`)
VALUES (5, 2);


-- -----------------------------------------------------
-- insert in table `mydb`.`chats`
-- -----------------------------------------------------
INSERT mydb.chats(`id`, `title`)
VALUES (1, 'admin_1<=>user_2');
INSERT mydb.chats(`id`, `title`)
VALUES (2, 'admin_1<=>user_4');
INSERT mydb.chats(`id`, `title`)
VALUES (3, 'user_2<=>user_3');


-- -----------------------------------------------------
-- insert in table `mydb`.`chats_users`
-- -----------------------------------------------------
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (1, 1);
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (2, 2);
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (2, 1);
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (2, 4);
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (3, 2);
INSERT mydb.chats_users(`chats_id`, `users_id`)
VALUES (3, 1);


-- -----------------------------------------------------
-- insert in table `mydb`.`messages`
--
-- `timestamp` -> DATETIME (YYYY-MM-DD hh:mm:ss)
-- -----------------------------------------------------
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (1, '2020-10-10 10:00:00', 'Hi user_2', 1, 1);
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (2, '2020-10-10 10:01:00', 'Hi admin_1', 1, 2);
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (3, '2020-10-10 12:48:00', 'Hi user_4', 2, 1);
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (4, '2020-10-10 12:59:00', 'Hi admin_1', 2, 4);
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (5, '2023-10-10 09:59:00', 'Hi user_3', 3, 2);
INSERT mydb.messages(`id`, `time_stamp`, `text`, `chat_id`, `user_id`)
VALUES (6, '2023-10-10 10:01:00', 'Hi user_2', 3, 3);


-- -----------------------------------------------------
-- insert in table `mydb`.`bookrents`
--
-- startdate, enddate -> DATE (YYYY-MM-DD)
-- -----------------------------------------------------
-- INSERT mydb.bookrents(`id`, `owner_id`, `start_date`, `end_date`, `archive`, `book_id`, `user_id`) VALUES(1, 2, '2020-12-25', '2020-12-30', false, 1, 4);


-- -----------------------------------------------------
-- insert in table `mydb`.`hibernate_sequence`
--
-- for tests
-- -----------------------------------------------------
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);
INSERT mydb.hibernate_sequence(`next_val`)
VALUES (100);